# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI/CD and release

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]
    # Used by the GitHub merge queue feature.
    # Documentation: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue
    merge_group:

env:
    NAMESPACE_NAME: "freegamescatcher"
    IMAGE_NAME: "freegamescatcher-core"

jobs:
    build:
        name: ⚙️ Build

        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout repository
              uses: actions/checkout@v3

            - name: 🌐 Use Node.js LTS
              uses: actions/setup-node@v3
              with:
                  node-version: lts/*

            - name: 🗂 Cache "node_modules"
              uses: actions/cache@v3
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              with:
                  path: "**/node_modules"
                  key: ${{ runner.arch }}-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.arch }}-${{ runner.os }}-yarn-

            - name: 📦 Install dependencies
              if: steps.yarn-cache.outputs.cache-hit != 'true'
              run: yarn install --frozen-lockfile

            - name: ⚙️ Build application
              run: yarn run build

            - name: 🗃 List the state of node modules
              if: steps.yarn-cache.outputs.cache-hit != 'true'
              continue-on-error: true
              run: yarn list

    test-unit:
        name: 🧪 Unit tests

        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout repository
              uses: actions/checkout@v3

            - name: 🌐 Use Node.js LTS
              uses: actions/setup-node@v3
              with:
                  node-version: lts/*

            - name: 🗂 Cache "node_modules"
              uses: actions/cache@v3
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              with:
                  path: "**/node_modules"
                  key: ${{ runner.arch }}-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.arch }}-${{ runner.os }}-yarn-

            - name: 📦 Install dependencies
              if: steps.yarn-cache.outputs.cache-hit != 'true'
              run: yarn install --frozen-lockfile

            - name: 🧪 Run unit tests
              run: yarn run test:unit

            - name: 🗃 List the state of node modules
              if: steps.yarn-cache.outputs.cache-hit != 'true'
              continue-on-error: true
              run: yarn list

    release:
        name: 🔖 Release

        runs-on: ubuntu-latest

        needs: [build, test-unit]

        if: ${{ github.event_name != 'merge_group' }} # skip this job if the event is a merge_group

        steps:
            - name: 📥 Checkout repository
              uses: actions/checkout@v3
              with:
                  # used by semantic-release to bypass the branch protection rules
                  token: ${{ secrets.GH_TOKEN }}

            - name: 🌐 Use Node.js LTS
              uses: actions/setup-node@v3
              with:
                  node-version: lts/*

            - name: 🗂 Cache "node_modules"
              uses: actions/cache@v3
              with:
                  path: "**/node_modules"
                  key: ${{ runner.arch }}-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.arch }}-${{ runner.os }}-yarn-

            - name: 🔖 Release application
              run: yarn run release
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
                  # NPM_TOKEN: ${{ secrets.NPM_TOKEN }} # optional, needed to publish packages on npm
              id: version # save the version to use in an other step/job
        outputs:
            version: ${{ steps.version.outputs.nextVersion }}

    push:
        name: 🐳 Build and push image

        runs-on: ubuntu-latest

        needs: release

        steps:
            - name: 📥 Checkout repository
              uses: actions/checkout@v3

            - name: ⚙️ Set up QEMU
              uses: docker/setup-qemu-action@v2

            - name: 🛠 Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: 📲 Login to DockerHub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: 🐳 Build and push image latest
              uses: docker/build-push-action@v3
              with:
                  context: . # https://github.com/marketplace/actions/build-and-push-docker-images#git-context
                  platforms: linux/amd64,linux/arm64
                  push: true
                  tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
                  build-args: |
                      NODE_ENV=pre-production
                      VERSION=latest

            - name: 🐳 Build and push image ${{ needs.release.outputs.version }}
              uses: docker/build-push-action@v3
              if: ${{ needs.release.outputs.version }} # deploy only if there is a new published version
              with:
                  context: . # https://github.com/marketplace/actions/build-and-push-docker-images#git-context
                  platforms: linux/amd64,linux/arm64
                  push: true
                  tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }}
                  build-args: |
                      VERSION=${{ needs.release.outputs.version }}

    deploy-prep:
        name: 🚀 Deploy latest to prep.

        runs-on: ubuntu-latest

        needs: [release, push]

        environment: pre-production # refer to https://github.com/size-up/docs/settings/environments

        steps:
            - name: 🚀 Deploy latest to pre-production
              uses: actions-hub/kubectl@master
              env:
                  KUBE_CONFIG: ${{ secrets.OCI_KUBE_CONFIG }}
              with:
                  args: rollout -n ${{ env.NAMESPACE_NAME }} restart deployment ${{ env.IMAGE_NAME }}-prep

    deploy-prod:
        name: 🚀 Deploy v${{ needs.release.outputs.version }} to prod.

        runs-on: ubuntu-latest

        needs: [release, push]

        if: ${{ needs.release.outputs.version }} # deploy only if there is a new published version

        environment: production # refer to https://github.com/size-up/docs/settings/environments

        steps:
            - name: 🚀 Deploy v${{ needs.release.outputs.version }} to production
              uses: actions-hub/kubectl@master
              env:
                  KUBE_CONFIG: ${{ secrets.OCI_KUBE_CONFIG }}
              with:
                  args: set image -n ${{ env.NAMESPACE_NAME }} deployment/${{ env.IMAGE_NAME }}-prod ${{ env.IMAGE_NAME }}-prod=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }}
